{"version":3,"sources":["redux/reducers sync /^/.*$","components/Templates/MainTemplate/index.jsx","utils/fetch.js","api/restCountriesApi.js","utils/cacheService.js","redux/selectors/loadingSelector.js","components/MultilangString/index.jsx","components/Input/index.jsx","redux/actions/countries.js","components/Cards/Card/index.jsx","components/Cards/MainCard/index.jsx","components/PropertyItem/index.jsx","components/Cards/BasicCard/index.jsx","components/NestedList/index.jsx","components/Cards/NestedListCard/index.jsx","components/Cards/ListCard/index.jsx","components/Error/index.jsx","redux/selectors/errorMessageSelector.js","components/Content/index.jsx","components/LanguageToggler/index.jsx","redux/actions/system.js","components/AppBar/index.jsx","redux/actions/ui.js","components/SidePanel/index.jsx","App.js","redux/store.js","serviceWorker.js","index.js","constants/languages.js","redux/reducers/index.js","redux/reducers/countries.js","redux/reducers/errorReducer.js","redux/reducers/loadingReducer.js","redux/reducers/system.js","redux/reducers/ui.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","useStyles","makeStyles","theme","root","justifyContent","MainTemplate","input","result","classes","Grid","className","container","spacing","item","xs","sm","md","get","url","a","fetch","response","json","body","getAllCountries","parameters","parametersForRequest","Array","isArray","join","getCountryByCode","cacheMap","Map","getItem","key","payload","validTill","Date","now","value","delete","setItem","validHours","hours","set","createLoadingSelector","actions","state","_","some","action","MultilangString","useSelector","system","language","EN","loadingSelector","Input","dispatch","useDispatch","isFetching","countryList","countries","handleSelect","countryObject","alpha3Code","type","cahcedCountry","country","Skeleton","variant","style","height","Autocomplete","fullWidth","options","getOptionLabel","option","name","filterOptions","inputValue","matchSorter","threshold","rankings","CONTAINS","currencies","i","onChange","reason","renderInput","params","TextField","label","dictionary","common","mainInputNote","autoFocus","textAlign","skeleton","Card","title","isLoading","Typography","component","gutterBottom","MainCard","imageUrl","otherProps","CardMedia","alt","image","padding","PropertyItem","color","BasicCard","values","uid","NestedList","transition","useState","open","setOpen","List","disablePadding","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","unmountOnExit","NestedListCard","entries","filter","nestedKey","nestedItem","ListCard","ErrorWindow","message","Alert","severity","createErrorMessageSelector","compact","first","errorMessageSelector","Content","currentCountry","error","flag","capital","region","subregion","population","area","demonym","numericCode","nativeName","topLevelDomain","timezones","callingCodes","translations","languages","alpha2Code","altSpellings","latlng","borders","cioc","gini","getPropertyPair","countryProperties","lg","errors","countryInfoIsUnavailable","length","countryTitles","basicInfo","otherInfo","LanguageToggler","ToggleButtonGroup","size","exclusive","event","localStorage","setLanguage","aria-label","ToggleButton","RU","menuButton","marginLeft","AppBar","position","Toolbar","IconButton","edge","width","SidePanel","isOpenSidePanel","ui","toggleDrawer","SwipeableDrawer","anchor","onClose","onOpen","listOfCodes","App","useEffect","Container","maxWidth","appIsUnavaliable","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","rootReducer","applyMiddleware","Boolean","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","combineReducers","reduce","initial","require","default","initialState","matches","exec","requestName","requestState"],"mappings":"6KAAA,IAAIA,EAAM,CACT,KAAM,GACN,cAAe,GACf,iBAAkB,GAClB,iBAAkB,GAClB,oBAAqB,GACrB,UAAW,GACX,aAAc,GACd,mBAAoB,GACpB,sBAAuB,GACvB,WAAY,GACZ,cAAe,GACf,OAAQ,GACR,UAAW,IAIZ,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,iIC7BdY,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,eAAgB,cAmBLC,EAfM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACvBC,EAAUR,IAEhB,OACE,kBAACS,EAAA,EAAD,CAAMC,UAAWF,EAAQL,KAAMQ,WAAS,EAACC,QAAS,GAChD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC3BV,GAEH,kBAACG,EAAA,EAAD,CAAMI,MAAI,EAACF,WAAS,GACjBJ,K,4DCpBF,SAAeU,EAAtB,kC,4CAAO,WAAmBC,GAAnB,iBAAAC,EAAA,sEACkBC,MAAMF,GADxB,cACCG,EADD,yBAMUA,EAASC,OANnB,OAMHC,EANG,6DAQG,IAAI9B,MAAM,wBARb,iCAWE8B,GAXF,0D,sBCEP,IAEaC,EAAkB,SAACC,GAC9B,IAAMC,EACJD,GAAcE,MAAMC,QAAQH,GAAcA,EAAWI,KAAK,KAAO,GAEnE,OAAOZ,EAAI,GAAD,OANA,oCAMA,sBAAqBS,KAGpBI,EAAmB,SAACpC,GAC/B,OAAOuB,EAAI,GAAD,OAVA,oCAUA,iBAAgBvB,KCXtBqC,EAAW,IAAIC,IAERC,EAAU,SAACC,GACtB,IAAMC,EAAUJ,EAASd,IAAIiB,GAE7B,GAAKC,EAAL,CACA,KAAIA,EAAQC,UAAYC,KAAKC,OAK7B,OAAOH,EAAQI,MAJbR,EAASS,OAAON,KAOPO,EAAU,SAACP,EAAKK,EAAOG,GAClC,IAhBiBC,EAgBXR,EAAU,CACdI,QACAH,UAAWC,KAAKC,OAlBDK,EAkBmBD,EAlBD,IAARC,EAAe,OAqB1CZ,EAASa,IAAIV,EAAKC,I,iBCbLU,EANe,SAACC,GAAD,OAAa,SAACC,GAG1C,OAAOC,IAAEF,GAASG,MAAK,SAACC,GAAD,OAAYF,IAAE/B,IAAI8B,EAAN,yBAA+BG,S,QCKrDC,EAPS,SAAC,GAAe,IAAbZ,EAAY,EAAZA,MAGnBhC,EAASgC,EAFMa,aAAY,SAACL,GAAD,OAAWA,EAAMM,UAA1CC,UAGR,OAAO/C,GAAkBgC,EAAMgB,M,QCU3BC,EAAkBX,EADR,CAAC,qBA+CFY,EA5CD,WACZ,IAAMC,EAAWC,cAEXC,EAAaR,aAAY,SAACL,GAAD,OAAWS,EAAgBT,MAElDc,EAAgBT,aAAY,SAACL,GAAD,OAAWA,EAAMe,aAA7CD,YAWFE,EAAe,SAACC,GCVU,IAACtE,EDW/BgE,GCX+BhE,EDWHsE,EAAcC,WCXZ,uCAAU,WAAOP,GAAP,iBAAAvC,EAAA,yDAC1CuC,EAAS,CAAEQ,KAAM,wBACXC,EAAgBlC,EAAQvC,GAFY,UAOpCyE,EAPoC,gBAOrBC,EAAUD,EAPW,uCAStBrC,EAAiBpC,GATK,OAStC0E,EATsC,OAUtC3B,EAAQ/C,EAAM0E,EAAS,GAVe,QAaxCV,EAAS,CACPQ,KAAM,sBACN/B,QAASiC,IAf6B,kDAkBxCV,EAAS,CACPQ,KAAM,sBACN/B,QAAQ,EAAD,KApB+B,0DAAV,yDDchC,OAAQyB,EAoBN,kBAACS,EAAA,EAAD,CAAUC,QAAQ,OAAOC,MAAO,CAAEC,OAAQ,UAnB1C,kBAACC,EAAA,EAAD,CACErF,GAAG,aACHsF,WAAS,EACTC,QAASd,EACTe,eAAgB,SAACC,GAAD,OAAYA,EAAOC,MACnCC,cAnBkB,SAACJ,EAAD,OAAYK,EAAZ,EAAYA,WAAZ,OACpBC,YAAYN,EAASK,EAAY,CAC/BrF,KAAM,CACJ,CAAEuF,UAAWD,IAAYE,SAASC,SAAUlD,IAAK,QACjD,aACA,SAACrB,GAAD,OAAUA,EAAKwE,WAAWpG,KAAI,SAACqG,GAAD,OAAOA,EAAE5F,aAezC6F,SAAU,SAAC/F,EAAG+C,EAAOiD,GACJ,kBAAXA,GAA4BzB,EAAaxB,IAE/CkD,YAAa,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,MAAO,kBAAC,EAAD,CAAiBrD,MAAOsD,EAAWC,OAAOC,gBACjDzB,QAAQ,WACR0B,WAAS,S,2CE9CbhG,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqB,KAAM,CACJ0E,UAAW,QAEbC,SAAU,CACR1B,OAAQ,aAqBG2B,EAjBF,SAAC,GAAsC,IAAD,IAAnCC,aAAmC,MAA3B,GAA2B,EAAvB7D,EAAuB,EAAvBA,MAAO8D,EAAgB,EAAhBA,UAC3B7F,EAAUR,IAEhB,OAAQqG,EAUN,kBAAChC,EAAA,EAAD,CAAU3D,UAAWF,EAAQ0F,SAAU5B,QAAQ,SAT/C,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACgC,EAAA,EAAD,CAAYhC,QAAQ,KAAKiC,UAAU,KAAKC,cAAY,GACjDJ,GAEH,yBAAK1F,UAAWF,EAAQe,MAAOgB,MCRxBkE,EAZE,SAAC,GAAkD,IAAD,IAA/CL,aAA+C,MAAvC,GAAuC,MAAnCM,gBAAmC,MAAxB,GAAwB,EAAjBC,EAAiB,oCACjE,OACE,kBAAC,EAAD,eACEP,MAAOA,EACP7D,MACE,kBAACqE,EAAA,EAAD,CAAWL,UAAU,MAAMM,IAAKT,EAAOU,MAAOJ,EAAUN,MAAOA,KAE7DO,K,QCRJ3G,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ4G,QAAQ,OAAD,OAAS7G,EAAMU,QAAQ,GAAvB,WAoBIoG,EAhBM,SAAC,GAA+C,IAAD,IAA5CZ,aAA4C,MAApC,GAAoC,MAAhC7D,aAAgC,MAAxB,GAAwB,EAAjBoE,EAAiB,iCAC5DnG,EAAUR,IAEhB,OACE,qCAAGU,UAAWF,EAAQL,MAAUwG,GAC9B,kBAACL,EAAA,EAAD,CAAYhC,QAAQ,QAAQiC,UAAU,QACnCH,EADH,MAIA,kBAACE,EAAA,EAAD,CAAYhC,QAAQ,QAAQ2C,MAAM,gBAAgBV,UAAU,QACzDhE,K,QCHM2E,EAXG,SAAC,GAAoC,IAAD,IAAjCC,cAAiC,MAAxB,GAAwB,EAAjBR,EAAiB,0BACpD,OACE,kBAAC,EAAD,eACEpE,MAAO4E,EAAOlI,KAAI,mCAAEiD,EAAF,KAAOK,EAAP,YAChB,kBAAC,EAAD,CAAcL,IAAKkF,YAAIlF,GAAMkE,MAAOlE,EAAKK,MAAOA,QAE9CoE,K,6FCmBKU,GAvBI,SAAC,GAAqC,IAAnCF,EAAkC,EAAlCA,OAAkC,IAA1BG,kBAA0B,MAAb,OAAa,IAC9BC,mBAAS,IADqB,mBAC/CC,EAD+C,KACzCC,EADyC,KAMtD,OACE,kBAACC,EAAA,EAAD,CAAMC,gBAAc,GACjBR,EAAOlI,KAAI,mCAAEmH,EAAF,KAAS7D,EAAT,YACV,yBAAKL,IAAKkE,GACR,kBAACwB,EAAA,EAAD,CAAUC,QAAM,EAACtB,UAAU,KAAKuB,QAAS,kBAR5B1I,EAQ8CgH,OAPjEqB,EAAQ,eAAKD,EAAN,eAAapI,GAAMoI,EAAKpI,MADb,IAACA,IASX,kBAAC2I,GAAA,EAAD,CAAcC,QAAS5B,IACtBoB,EAAKpB,GAAS,kBAAC,KAAD,MAAiB,kBAAC,KAAD,OAElC,kBAAC6B,EAAA,EAAD,CAAUC,GAAIV,EAAKpB,GAAQ+B,QAASb,EAAYc,eAAa,GAC1D7F,SCME8F,GAxBQ,SAAC,GAAoC,IAAD,IAAjClB,cAAiC,MAAxB,GAAwB,EAAjBR,EAAiB,0BACzD,OACE,kBAAC,EAAD,eACEpE,MACE,kBAAC,GAAD,CACE4E,OAAQA,EAAOlI,KAAI,SAAC4B,GAAD,MAAU,CAC3BA,EAAKiE,KACLlF,OAAO0I,QAAQzH,GACZ0H,QAAO,kBAA+B,SAA/B,uBACPtJ,KAAI,mCAAEuJ,EAAF,KAAaC,EAAb,YACH,kBAAC,EAAD,CACEvG,IAAKsG,EACLpC,MAAOoC,EACPjG,MAAOkG,cAMf9B,KCTK+B,GAXE,SAAC,GAAoC,IAAD,IAAjCvB,cAAiC,MAAxB,GAAwB,EAAjBR,EAAiB,0BACnD,OACE,kBAAC,EAAD,eACEpE,MAAO3C,OAAO0I,QAAQnB,GAAQlI,KAAI,mCAAEiD,EAAF,KAAOK,EAAP,YAChC,kBAAC,EAAD,CAAcL,IAAKA,EAAKkE,MAAOlE,EAAKK,MAAOA,QAEzCoE,K,UCCKgC,GARK,SAAC,GAAsB,IAAD,IAAnBC,eAAmB,MAAT,GAAS,EACxC,OACE,kBAACC,GAAA,EAAD,CAAOvE,QAAQ,WAAWwE,SAAS,SAChCF,ICOQG,GAZoB,SAACjG,GAAD,OAAa,SAACC,GAI/C,OACEC,IAAEF,GACC7D,KAAI,SAACiE,GAAD,OAAYF,IAAE/B,IAAI8B,EAAN,uBAA6BG,OAC7C8F,UACAC,SAAW,KCQZjJ,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,eAAgB,cAId0C,GAAU,CAAC,eACXU,GAAkBX,EAAsBC,IACxCoG,GAAuBH,GAA2BjG,IAmJzCqG,GAjJC,WACd,IAAM3I,EAAUR,KAERoJ,EAAmBhG,aAAY,SAACL,GAAD,OAAWA,EAAMe,aAAhDsF,eACFxF,EAAaR,aAAY,SAACL,GAAD,OAAWS,GAAgBT,MACpDsG,EAAQjG,aAAY,SAACL,GAAD,OAAWmG,GAAqBnG,MAGxD+B,EAuBEsE,EAvBFtE,KACAwE,EAsBEF,EAtBFE,KACAC,EAqBEH,EArBFG,QACAC,EAoBEJ,EApBFI,OACAC,EAmBEL,EAnBFK,UACAC,EAkBEN,EAlBFM,WACAC,EAiBEP,EAjBFO,KACAC,EAgBER,EAhBFQ,QACAC,EAeET,EAfFS,YACAC,EAcEV,EAdFU,WACAC,EAaEX,EAbFW,eACAC,EAYEZ,EAZFY,UACAC,EAWEb,EAXFa,aACAC,EAUEd,EAVFc,aACAC,EASEf,EATFe,UACA9E,EAQE+D,EARF/D,WACA+E,EAOEhB,EAPFgB,WACAnG,EAMEmF,EANFnF,WACAoG,EAKEjB,EALFiB,aACAC,EAIElB,EAJFkB,OACAC,EAGEnB,EAHFmB,QACAC,EAEEpB,EAFFoB,KACAC,EACErB,EADFqB,KAGIC,EAAkB,SAACtE,EAAO7D,GAAR,MAAkB,CACxC,kBAAC,EAAD,CAAiBA,MAAOsD,EAAW8E,kBAAkBvE,KACrD7D,IAGF,OACE,kBAAC9B,EAAA,EAAD,CAAMC,UAAWF,EAAQL,KAAMQ,WAAS,EAACC,QAAS,GAC9CyI,EA2FA,kBAAC5I,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAG4J,GAAI,GACnC,kBAAC,GAAD,CACEhC,QACE,kBAAC,EAAD,CACErG,MAAOsD,EAAWgF,OAAOC,+BA9FhClL,OAAOD,KAAKyJ,GAAgB2B,QAAUnH,IACrC,oCACE,kBAACnD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CAAUoF,MAAOtB,EAAM4B,SAAU4C,EAAMjD,UAAWzC,KAEpD,kBAACnD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CACEoF,MACE,kBAAC,EAAD,CAAiB7D,MAAOsD,EAAWmF,cAAcC,YAEnD9D,OAAQ,CACNuD,EAAgB,UAAWnB,GAC3BmB,EAAgB,SAAUlB,GAC1BkB,EAAgB,YAAajB,GAC7BiB,EAAgB,aAAchB,GAC9BgB,EAAgB,OAAQf,GACxBe,EAAgB,UAAWd,GAC3Bc,EAAgB,cAAeb,GAC/Ba,EAAgB,aAAcZ,GAC9BY,EACE,kBACCX,GAAkB,IAAIlI,KAAK,OAE9B6I,EAAgB,aAAcV,GAAa,IAAInI,KAAK,OACpD6I,EACE,gBACCT,GAAgB,IAAIhL,KAAI,SAACS,GAAD,iBAAcA,MAAQmC,KAAK,QAGxDwE,UAAWzC,KAGf,kBAACnD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,GAAD,CACEoF,MACE,kBAAC,EAAD,CACE7D,MAAOsD,EAAWmF,cAAcd,eAGpC/C,OAAQ+C,EACR7D,UAAWzC,KAGf,kBAACnD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,GAAD,CACEoF,MACE,kBAAC,EAAD,CAAiB7D,MAAOsD,EAAWmF,cAAcb,YAEnDhD,OAAQgD,EACR9D,UAAWzC,KAGf,kBAACnD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,GAAD,CACEoF,MACE,kBAAC,EAAD,CACE7D,MAAOsD,EAAWmF,cAAc3F,aAGpC8B,OAAQ9B,EACRgB,UAAWzC,KAIb,kBAACnD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CACEoF,MACE,kBAAC,EAAD,CACE7D,MAAOsD,EAAWmF,cAAcE,YAGpC/D,OAAQ,CACNuD,EAAgB,aAAcN,GAC9BM,EAAgB,aAAczG,GAC9ByG,EACE,gBACCL,GAAgB,IAAIxI,KAAK,OAE5B6I,EAAgB,UAAWJ,GAAU,IAAIzI,KAAK,MAC9C6I,EAAgB,WAAYH,GAAW,IAAI1I,KAAK,OAChD6I,EAAgB,OAAQF,GACxBE,EAAgB,OAAQD,IAE1BpE,UAAWzC,Q,sECpHduH,GA3BS,SAAC,GAA8C,EAA5C/E,MAA4C,EAAhC7D,MAAgC,iCAAC,IAChEmB,EAAWC,cAETL,EAAaF,aAAY,SAACL,GAAD,OAAWA,EAAMM,UAA1CC,SAMR,OACE,kBAAC8H,GAAA,EAAD,CACEC,KAAK,QACL9I,MAAOe,EACPgI,WAAS,EACT/F,SATmB,SAACgG,EAAOjI,GACZ,OAAbA,GAAmBI,ECfA,SAACJ,GAG1B,OAFAkI,aAAa/I,QAAQ,WAAYa,GAE1B,CACLY,KAAM,eACN/B,QAASmB,GDUuBmI,CAAYnI,KAS1CoI,aAAW,gBAEX,kBAACC,GAAA,EAAD,CAAcpJ,MAAOgB,IAAImI,aAAYnI,KAClCA,KAEH,kBAACoI,GAAA,EAAD,CAAcpJ,MAAOqJ,IAAIF,aAAYE,KAClCA,OEdH5L,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,eAAgB,iBAElByL,WAAY,CAAEC,WAAY5L,EAAMU,QAAQ,IACxCwF,MAAO,OAkCM2F,GA/BA,WACb,IAAMvL,EAAUR,KACV0D,EAAWC,cAMjB,OACE,kBAAC,KAAD,CAAWqI,SAAS,UAClB,kBAACC,GAAA,EAAD,CAASvL,UAAWF,EAAQL,MAC1B,kBAACmG,EAAA,EAAD,CAAYhC,QAAQ,KAAK5D,UAAWF,EAAQ4F,OAC1C,kBAAC,EAAD,CAAiB7D,MAAOsD,EAAWC,OAAOM,SAE5C,6BACE,kBAAC,GAAD,MACA,kBAAC8F,GAAA,EAAD,CACEC,KAAK,QACLzL,UAAWF,EAAQqL,WACnB5E,MAAM,UACNyE,aAAW,OACX5D,QAjBU,WAClBpE,ECpBkC,CACpCQ,KAAM,wBDqCI,kBAAC,KAAD,W,UEjCNlE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCS,UAAW,CACTyL,MAAO,aA+CIC,GA3CG,WAChB,IAAM7L,EAAUR,KACV0D,EAAWC,cAET2I,EAAoBlJ,aAAY,SAACL,GAAD,OAAWA,EAAMwJ,MAAjDD,gBACAzI,EAAgBT,aAAY,SAACL,GAAD,OAAWA,EAAMe,aAA7CD,YAEF2I,EAAe,SAAChF,GAAD,OAAU,SAAC+D,KAE5BA,GACe,YAAfA,EAAMrH,MACS,QAAdqH,EAAMrJ,KAA+B,UAAdqJ,EAAMrJ,MAKhCwB,EAAkC8D,EDlChC,CACEtD,KAAM,mBAER,CACEA,KAAM,uBCiCZ,OACE,kBAACuI,GAAA,EAAD,CACEC,OAAO,QACPlF,KAAM8E,EACNK,QAASH,GAAa,GACtBI,OAAQJ,GAAa,IAErB,yBAAK9L,UAAWF,EAAQG,WACtB,kBAAC,GAAD,CACEwG,OAAQ,CACN,CACE,kBAAC,EAAD,CAAiB5E,MAAOsD,EAAWC,OAAO+G,cAC1ChJ,EAAY5E,KAAI,gBAAG6F,EAAH,EAAGA,KAAMb,EAAT,EAASA,WAAT,OACd,kBAAC,EAAD,CAAc/B,IAAK4C,EAAMsB,MAAOtB,EAAMvC,MAAO0B,SAInDqD,WAAY,OCjChBtH,I,OAAYC,aAAW,SAACC,GAAD,MAAY,CACvCS,UAAW,CACToG,QAAS7G,EAAMU,QAAQ,SAKrBsI,GAAuBH,GADb,CAAC,qBAgCF+D,GA7BH,WACV,IAAMtM,EAAUR,KACV0D,EAAWC,cAEjBoJ,qBAAU,WACRrJ,EhBlC4B,uCAAM,WAAOA,GAAP,eAAAvC,EAAA,6DACpCuC,EAAS,CAAEQ,KAAM,6BADmB,kBAIR1C,EAAgB,CACxC,OACA,aACA,eAPgC,OAI5BqC,EAJ4B,OAUlCH,EAAS,CACPQ,KAAM,2BACN/B,QAAS0B,IAZuB,gDAelCH,EAAS,CACPQ,KAAM,2BACN/B,QAAQ,EAAD,KAjByB,yDAAN,yDgBmC3B,CAACuB,IAEJ,IAAM2F,EAAQjG,aAAY,SAACL,GAAD,OAAWmG,GAAqBnG,MAE1D,OACE,yBAAKrC,UAAU,OACb,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAACsM,EAAA,EAAD,CAAWtM,UAAWF,EAAQG,UAAWsM,SAAS,MAC9C5D,EAGA,kBAAC,GAAD,CACET,QACE,kBAAC,EAAD,CAAiBrG,MAAOsD,EAAWgF,OAAOqC,qBAJ9C,kBAAC,EAAD,CAAc5M,MAAO,kBAAC,EAAD,MAAWC,OAAQ,kBAAC,GAAD,W,2BC3C5C4M,GAAmBC,OAAOC,sCAAwCC,KAElEC,GAAa,CAACC,MAOLC,GALDC,aACZC,WACAR,GAAiBS,KAAe,WAAf,EAAmBL,MCClBM,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,IACf,kBAACU,EAAA,EAAD,MACA,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvF,GACLwF,QAAQxF,MAAMA,EAAMT,a,8hHEzI5B,oEAAO,IAAMgD,EAAK,KACLrI,EAAK,M,gCCDlB,mBAUeuL,sBARE,CACf,iBACA,eACA,YACA,KACA,UAISC,QAAO,SAACC,EAASlK,GAGxB,OADAkK,EAAQlK,GAAQmK,OAAQ,YAAKnK,IAAQoK,QAC9BF,IACN,M,mDCfCG,EAAe,CACnBtL,YAAa,GACbuF,eAAgB,IAGH,qBAAmC,IAAlCrG,EAAiC,uDAAzBoM,EAAcjM,EAAW,uCAC/C,OAAQA,EAAOgB,MACb,IAAK,sBACH,OAAO,eACFnB,EADL,CAEEqG,eAAgBlG,EAAOf,UAE3B,IAAK,2BACH,OAAO,eACFY,EADL,CAEEc,YAAaX,EAAOf,UAExB,QACE,OAAOY,K,mEClBE,qBAAyB,IAAxBA,EAAuB,uDAAf,GAAIG,EAAW,uCAC7BgB,EAAkBhB,EAAlBgB,KAAM/B,EAAYe,EAAZf,QACRiN,EAAU,yBAAyBC,KAAKnL,GAG9C,IAAKkL,EAAS,OAAOrM,EALgB,kBAOCqM,EAPD,GAO5BE,EAP4B,KAOfC,EAPe,KAQrC,OAAO,eACFxM,EADL,eAKGuM,EAA+B,YAAjBC,EAA6BpN,EAAQyG,QAAU,O,mECbnD,qBAAyB,IAAxB7F,EAAuB,uDAAf,GAAIG,EAAW,uCAC7BgB,EAAShB,EAATgB,KACFkL,EAAU,iCAAiCC,KAAKnL,GAGtD,IAAKkL,EAAS,OAAOrM,EALgB,kBAOCqM,EAPD,GAO5BE,EAP4B,KAOfC,EAPe,KAQrC,OAAO,eACFxM,EADL,eAKGuM,EAA+B,YAAjBC,M,2DCXbJ,EAAe,CACnB7L,SAAUkI,aAAavJ,QAAQ,aAAesB,KAGjC,qBAAmC,IAAlCR,EAAiC,uDAAzBoM,EAAcjM,EAAW,uCAC/C,OAAQA,EAAOgB,MACb,IAAK,eACH,OAAO,eACFnB,EADL,CAEEO,SAAUJ,EAAOf,UAGrB,QACE,OAAOY,K,mDCfPoM,EAAe,CACnB7C,iBAAiB,GAGJ,qBAAmC,IAAlCvJ,EAAiC,uDAAzBoM,EAAcjM,EAAW,uCAC/C,OAAQA,EAAOgB,MACb,IAAK,kBACH,OAAO,eACFnB,EADL,CAEEuJ,iBAAiB,IAErB,IAAK,mBACH,OAAO,eACFvJ,EADL,CAEEuJ,iBAAiB,IAErB,IAAK,oBACH,OAAO,eACFvJ,EADL,CAEEuJ,iBAAkBvJ,EAAMuJ,kBAE5B,QACE,OAAOvJ,M","file":"static/js/main.3db9ec56.chunk.js","sourcesContent":["var map = {\n\t\"./\": 47,\n\t\"./countries\": 74,\n\t\"./countries.js\": 74,\n\t\"./errorReducer\": 75,\n\t\"./errorReducer.js\": 75,\n\t\"./index\": 47,\n\t\"./index.js\": 47,\n\t\"./loadingReducer\": 76,\n\t\"./loadingReducer.js\": 76,\n\t\"./system\": 77,\n\t\"./system.js\": 77,\n\t\"./ui\": 78,\n\t\"./ui.js\": 78\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 115;","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst MainTemplate = ({ input, result }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid className={classes.root} container spacing={3}>\r\n      <Grid item xs={12} sm={8} md={6}>\r\n        {input}\r\n      </Grid>\r\n      <Grid item container>\r\n        {result}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MainTemplate;\r\n","export async function get(url) {\r\n  const response = await fetch(url);\r\n\r\n  let body;\r\n\r\n  try {\r\n    body = await response.json();\r\n  } catch (error) {\r\n    throw new Error(\"Can't parse response\");\r\n  }\r\n\r\n  return body;\r\n}\r\n","import { get } from \"../utils/fetch\";\r\n\r\nconst url = \"https://restcountries.eu/rest/v2/\";\r\n\r\nexport const getAllCountries = (parameters) => {\r\n  const parametersForRequest =\r\n    parameters && Array.isArray(parameters) ? parameters.join(\";\") : \"\";\r\n\r\n  return get(`${url}all?fields=${parametersForRequest}`);\r\n};\r\n\r\nexport const getCountryByCode = (code) => {\r\n  return get(`${url}alpha/${code}`);\r\n};\r\n\r\n/*\r\nexport const getCountryByPartialName = () => {\r\n  return null;\r\n};\r\n\r\nexport const getCountryByPartialName = () => {\r\n  return null;\r\n};\r\n\r\nexport const getCountryByFullName = () => {\r\n  return null;\r\n};\r\n\r\n\r\n\r\nexport const getCountryByCurrency = () => {\r\n  return null;\r\n};\r\n*/\r\n","const hoursToMs = (hours) => hours * 1000 * 3600;\r\nconst cacheMap = new Map();\r\n\r\nexport const getItem = (key) => {\r\n  const payload = cacheMap.get(key);\r\n\r\n  if (!payload) return undefined;\r\n  if (payload.validTill < Date.now()) {\r\n    cacheMap.delete(key);\r\n    return undefined;\r\n  }\r\n\r\n  return payload.value;\r\n};\r\n\r\nexport const setItem = (key, value, validHours) => {\r\n  const payload = {\r\n    value,\r\n    validTill: Date.now() + hoursToMs(validHours),\r\n  };\r\n\r\n  cacheMap.set(key, payload);\r\n};\r\n\r\nexport const removeItem = (key) => {\r\n  cacheMap.delete(key);\r\n};\r\n","import _ from \"lodash\";\r\n\r\nconst createLoadingSelector = (actions) => (state) => {\r\n  // returns true only when all actions is not loading\r\n\r\n  return _(actions).some((action) => _.get(state, `loadingReducer.${action}`));\r\n};\r\n\r\nexport default createLoadingSelector;\r\n","import { useSelector } from \"react-redux\";\r\nimport { EN } from \"../../constants/languages\";\r\n\r\nconst MultilangString = ({ value }) => {\r\n  const { language } = useSelector((state) => state.system);\r\n\r\n  const result = value[language];\r\n  return result ? result : value[EN];\r\n};\r\n\r\nexport default MultilangString;\r\n","import React from \"react\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport matchSorter from \"match-sorter\";\r\n\r\nimport { fetchCountryByCode } from \"../../redux/actions/countries\";\r\nimport createLoadingSelector from \"../../redux/selectors/loadingSelector\";\r\n\r\nimport MultilangString from \"../MultilangString\";\r\nimport dictionary from \"../../utils/dictionary.json\";\r\n\r\nconst actions = [\"GET_COUNTRY_LIST\"];\r\nconst loadingSelector = createLoadingSelector(actions);\r\n\r\nconst Input = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isFetching = useSelector((state) => loadingSelector(state));\r\n\r\n  const { countryList } = useSelector((state) => state.countries);\r\n\r\n  const filterOptions = (options, { inputValue }) =>\r\n    matchSorter(options, inputValue, {\r\n      keys: [\r\n        { threshold: matchSorter.rankings.CONTAINS, key: \"name\" },\r\n        \"alpha3Code\",\r\n        (item) => item.currencies.map((i) => i.code),\r\n      ],\r\n    });\r\n\r\n  const handleSelect = (countryObject) => {\r\n    dispatch(fetchCountryByCode(countryObject.alpha3Code));\r\n  };\r\n\r\n  return !isFetching ? (\r\n    <Autocomplete\r\n      id=\"main-input\"\r\n      fullWidth\r\n      options={countryList}\r\n      getOptionLabel={(option) => option.name}\r\n      filterOptions={filterOptions}\r\n      onChange={(e, value, reason) => {\r\n        if (reason === \"select-option\") handleSelect(value);\r\n      }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label={<MultilangString value={dictionary.common.mainInputNote} />}\r\n          variant=\"outlined\"\r\n          autoFocus\r\n        />\r\n      )}\r\n    />\r\n  ) : (\r\n    <Skeleton variant=\"rect\" style={{ height: \"56px\" }} />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import { getAllCountries, getCountryByCode } from \"../../api/restCountriesApi\";\r\nimport { getItem, setItem } from \"../../utils/cacheService\";\r\n\r\nexport const fetchCountryList = () => async (dispatch) => {\r\n  dispatch({ type: \"GET_COUNTRY_LIST_REQUEST\" });\r\n\r\n  try {\r\n    const countryList = await getAllCountries([\r\n      \"name\",\r\n      \"alpha3Code\",\r\n      \"currencies\",\r\n    ]);\r\n\r\n    dispatch({\r\n      type: \"GET_COUNTRY_LIST_SUCCESS\",\r\n      payload: countryList,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: \"GET_COUNTRY_LIST_FAILURE\",\r\n      payload: err,\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchCountryByCode = (code) => async (dispatch) => {\r\n  dispatch({ type: \"GET_COUNTRY_REQUEST\" });\r\n  const cahcedCountry = getItem(code);\r\n\r\n  try {\r\n    let country;\r\n\r\n    if (cahcedCountry) country = cahcedCountry;\r\n    else {\r\n      country = await getCountryByCode(code);\r\n      setItem(code, country, 1);\r\n    }\r\n\r\n    dispatch({\r\n      type: \"GET_COUNTRY_SUCCESS\",\r\n      payload: country,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: \"GET_COUNTRY_FAILURE\",\r\n      payload: err,\r\n    });\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MuiCard from \"@material-ui/core/Card\";\r\nimport MuiCardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    textAlign: \"left\",\r\n  },\r\n  skeleton: {\r\n    height: \"300px\",\r\n  },\r\n}));\r\n\r\nconst Card = ({ title = \"\", value, isLoading }) => {\r\n  const classes = useStyles();\r\n\r\n  return !isLoading ? (\r\n    <MuiCard>\r\n      <MuiCardContent>\r\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <div className={classes.body}>{value}</div>\r\n      </MuiCardContent>\r\n    </MuiCard>\r\n  ) : (\r\n    <Skeleton className={classes.skeleton} variant=\"rect\" />\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\nimport Card from \"../Card\";\r\n\r\nconst MainCard = ({ title = \"\", imageUrl = \"\", ...otherProps }) => {\r\n  return (\r\n    <Card\r\n      title={title}\r\n      value={\r\n        <CardMedia component=\"img\" alt={title} image={imageUrl} title={title} />\r\n      }\r\n      {...otherProps}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MainCard;\r\n","import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: `0px ${theme.spacing(2)}px`,\r\n  },\r\n}));\r\n\r\nconst PropertyItem = ({ title = \"\", value = \"\", ...otherProps }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <p className={classes.root} {...otherProps}>\r\n      <Typography variant=\"body2\" component=\"span\">\r\n        {title}\r\n        {`: `}\r\n      </Typography>\r\n      <Typography variant=\"body2\" color=\"textSecondary\" component=\"span\">\r\n        {value}\r\n      </Typography>\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default PropertyItem;\r\n","import React from \"react\";\r\n\r\nimport Card from \"../Card\";\r\nimport PropertyItem from \"../../PropertyItem\";\r\n\r\nimport { uid } from \"react-uid\";\r\n\r\nconst BasicCard = ({ values = [], ...otherProps }) => {\r\n  return (\r\n    <Card\r\n      value={values.map(([key, value]) => (\r\n        <PropertyItem key={uid(key)} title={key} value={value} />\r\n      ))}\r\n      {...otherProps}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BasicCard;\r\n","import React, { useState } from \"react\";\r\n\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst NestedList = ({ values, transition = \"auto\" }) => {\r\n  const [open, setOpen] = useState({});\r\n  const handleClick = (id) => {\r\n    setOpen({ ...open, [id]: !open[id] });\r\n  };\r\n\r\n  return (\r\n    <List disablePadding>\r\n      {values.map(([title, value]) => (\r\n        <div key={title}>\r\n          <ListItem button component=\"li\" onClick={() => handleClick(title)}>\r\n            <ListItemText primary={title} />\r\n            {open[title] ? <ExpandLess /> : <ExpandMore />}\r\n          </ListItem>\r\n          <Collapse in={open[title]} timeout={transition} unmountOnExit>\r\n            {value}\r\n          </Collapse>\r\n        </div>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default NestedList;\r\n","import React from \"react\";\r\n\r\nimport Card from \"../Card\";\r\nimport PropertyItem from \"../../PropertyItem\";\r\nimport NestedList from \"../../NestedList\";\r\n\r\nconst NestedListCard = ({ values = [], ...otherProps }) => {\r\n  return (\r\n    <Card\r\n      value={\r\n        <NestedList\r\n          values={values.map((item) => [\r\n            item.name,\r\n            Object.entries(item)\r\n              .filter(([nestedKey]) => nestedKey !== \"name\")\r\n              .map(([nestedKey, nestedItem]) => (\r\n                <PropertyItem\r\n                  key={nestedKey}\r\n                  title={nestedKey}\r\n                  value={nestedItem}\r\n                />\r\n              )),\r\n          ])}\r\n        />\r\n      }\r\n      {...otherProps}\r\n    />\r\n  );\r\n};\r\n\r\nexport default NestedListCard;\r\n","import React from \"react\";\r\n\r\nimport Card from \"../Card\";\r\nimport PropertyItem from \"../../PropertyItem\";\r\n\r\nconst ListCard = ({ values = {}, ...otherProps }) => {\r\n  return (\r\n    <Card\r\n      value={Object.entries(values).map(([key, value]) => (\r\n        <PropertyItem key={key} title={key} value={value} />\r\n      ))}\r\n      {...otherProps}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ListCard;\r\n","import React from \"react\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nconst ErrorWindow = ({ message = \"\" }) => {\r\n  return (\r\n    <Alert variant=\"outlined\" severity=\"error\">\r\n      {message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ErrorWindow;\r\n","import _ from \"lodash\";\r\n\r\nconst createErrorMessageSelector = (actions) => (state) => {\r\n  // returns the first error messages for actions\r\n  // * We assume when any request fails on a page that\r\n  //   requires multiple API calls, we shows the first error\r\n  return (\r\n    _(actions)\r\n      .map((action) => _.get(state, `errorReducer.${action}`))\r\n      .compact()\r\n      .first() || \"\"\r\n  );\r\n};\r\n\r\nexport default createErrorMessageSelector;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport MainCard from \"../Cards/MainCard\";\r\nimport BasicCard from \"../Cards/BasicCard\";\r\nimport NestedListCard from \"../Cards/NestedListCard\";\r\nimport ListCard from \"../Cards/ListCard\";\r\nimport Error from \"../Error\";\r\n\r\nimport createLoadingSelector from \"../../redux/selectors/loadingSelector\";\r\nimport createErrorMessageSelector from \"../../redux/selectors/errorMessageSelector\";\r\n\r\nimport MultilangString from \"../MultilangString\";\r\nimport dictionary from \"../../utils/dictionary.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst actions = [\"GET_COUNTRY\"];\r\nconst loadingSelector = createLoadingSelector(actions);\r\nconst errorMessageSelector = createErrorMessageSelector(actions);\r\n\r\nconst Content = () => {\r\n  const classes = useStyles();\r\n\r\n  const { currentCountry } = useSelector((state) => state.countries);\r\n  const isFetching = useSelector((state) => loadingSelector(state));\r\n  const error = useSelector((state) => errorMessageSelector(state));\r\n\r\n  const {\r\n    name,\r\n    flag,\r\n    capital,\r\n    region,\r\n    subregion,\r\n    population,\r\n    area,\r\n    demonym,\r\n    numericCode,\r\n    nativeName,\r\n    topLevelDomain,\r\n    timezones,\r\n    callingCodes,\r\n    translations,\r\n    languages,\r\n    currencies,\r\n    alpha2Code,\r\n    alpha3Code,\r\n    altSpellings,\r\n    latlng,\r\n    borders,\r\n    cioc,\r\n    gini,\r\n  } = currentCountry;\r\n\r\n  const getPropertyPair = (title, value) => [\r\n    <MultilangString value={dictionary.countryProperties[title]} />,\r\n    value,\r\n  ];\r\n\r\n  return (\r\n    <Grid className={classes.root} container spacing={3}>\r\n      {!error ? (\r\n        (Object.keys(currentCountry).length || isFetching) && (\r\n          <>\r\n            <Grid item xs={12} sm={6} md={4}>\r\n              <MainCard title={name} imageUrl={flag} isLoading={isFetching} />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={4}>\r\n              <BasicCard\r\n                title={\r\n                  <MultilangString value={dictionary.countryTitles.basicInfo} />\r\n                }\r\n                values={[\r\n                  getPropertyPair(\"capital\", capital),\r\n                  getPropertyPair(\"region\", region),\r\n                  getPropertyPair(\"subregion\", subregion),\r\n                  getPropertyPair(\"population\", population),\r\n                  getPropertyPair(\"area\", area),\r\n                  getPropertyPair(\"demonym\", demonym),\r\n                  getPropertyPair(\"numericCode\", numericCode),\r\n                  getPropertyPair(\"nativeName\", nativeName),\r\n                  getPropertyPair(\r\n                    \"topLevelDomain\",\r\n                    (topLevelDomain || []).join(\", \")\r\n                  ),\r\n                  getPropertyPair(\"timezones\", (timezones || []).join(\", \")),\r\n                  getPropertyPair(\r\n                    \"callingCodes\",\r\n                    (callingCodes || []).map((code) => `+${code}`).join(\", \")\r\n                  ),\r\n                ]}\r\n                isLoading={isFetching}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={4}>\r\n              <ListCard\r\n                title={\r\n                  <MultilangString\r\n                    value={dictionary.countryTitles.translations}\r\n                  />\r\n                }\r\n                values={translations}\r\n                isLoading={isFetching}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={4}>\r\n              <NestedListCard\r\n                title={\r\n                  <MultilangString value={dictionary.countryTitles.languages} />\r\n                }\r\n                values={languages}\r\n                isLoading={isFetching}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={4}>\r\n              <NestedListCard\r\n                title={\r\n                  <MultilangString\r\n                    value={dictionary.countryTitles.currencies}\r\n                  />\r\n                }\r\n                values={currencies}\r\n                isLoading={isFetching}\r\n              />\r\n            </Grid>\r\n            {\r\n              <Grid item xs={12} sm={6} md={4}>\r\n                <BasicCard\r\n                  title={\r\n                    <MultilangString\r\n                      value={dictionary.countryTitles.otherInfo}\r\n                    />\r\n                  }\r\n                  values={[\r\n                    getPropertyPair(\"alpha2Code\", alpha2Code),\r\n                    getPropertyPair(\"alpha3Code\", alpha3Code),\r\n                    getPropertyPair(\r\n                      \"altSpellings\",\r\n                      (altSpellings || []).join(\", \")\r\n                    ),\r\n                    getPropertyPair(\"latlng\", (latlng || []).join(\"/\")),\r\n                    getPropertyPair(\"borders\", (borders || []).join(\", \")),\r\n                    getPropertyPair(\"cioc\", cioc),\r\n                    getPropertyPair(\"gini\", gini),\r\n                  ]}\r\n                  isLoading={isFetching}\r\n                />\r\n              </Grid>\r\n            }\r\n          </>\r\n        )\r\n      ) : (\r\n        <Grid item xs={12} sm={8} md={6} lg={5}>\r\n          <Error\r\n            message={\r\n              <MultilangString\r\n                value={dictionary.errors.countryInfoIsUnavailable}\r\n              />\r\n            }\r\n          />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\n\r\nimport { setLanguage } from \"../../redux/actions/system\";\r\n\r\nimport { EN, RU } from \"../../constants/languages\";\r\n\r\nconst LanguageToggler = ({ title = \"\", value = \"\", ...otherProps }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { language } = useSelector((state) => state.system);\r\n\r\n  const handleLanguage = (event, language) => {\r\n    if (language !== null) dispatch(setLanguage(language));\r\n  };\r\n\r\n  return (\r\n    <ToggleButtonGroup\r\n      size=\"small\"\r\n      value={language}\r\n      exclusive\r\n      onChange={handleLanguage}\r\n      aria-label=\"set language\"\r\n    >\r\n      <ToggleButton value={EN} aria-label={EN}>\r\n        {EN}\r\n      </ToggleButton>\r\n      <ToggleButton value={RU} aria-label={RU}>\r\n        {RU}\r\n      </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  );\r\n};\r\n\r\nexport default LanguageToggler;\r\n","export const setLanguage = (language) => {\r\n  localStorage.setItem(\"language\", language);\r\n\r\n  return {\r\n    type: \"SET_LANGUAGE\",\r\n    payload: language,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MuiAppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nimport { toggleSidePanel } from \"../../redux/actions/ui\";\r\nimport LanguageToggler from \"../LanguageToggler\";\r\n\r\nimport MultilangString from \"../MultilangString\";\r\nimport dictionary from \"../../utils/dictionary.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    justifyContent: \"space-between\",\r\n  },\r\n  menuButton: { marginLeft: theme.spacing(2) },\r\n  title: {},\r\n}));\r\n\r\nconst AppBar = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = () => {\r\n    dispatch(toggleSidePanel());\r\n  };\r\n\r\n  return (\r\n    <MuiAppBar position=\"sticky\">\r\n      <Toolbar className={classes.root}>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          <MultilangString value={dictionary.common.title} />\r\n        </Typography>\r\n        <div>\r\n          <LanguageToggler />\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={handleClick}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n        </div>\r\n      </Toolbar>\r\n    </MuiAppBar>\r\n  );\r\n};\r\n\r\nexport default AppBar;\r\n","export const toggleWithValueSidePanel = (value) =>\r\n  value\r\n    ? {\r\n        type: \"OPEN_SIDE_PANEL\",\r\n      }\r\n    : {\r\n        type: \"CLOSE_SIDE_PANEL\",\r\n      };\r\n\r\nexport const toggleSidePanel = () => ({\r\n  type: \"TOGGLE_SIDE_PANEL\",\r\n});\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\n\r\nimport PropertyItem from \"../PropertyItem\";\r\nimport NestedList from \"../NestedList\";\r\n\r\nimport { toggleWithValueSidePanel } from \"../../redux/actions/ui\";\r\n\r\nimport MultilangString from \"../MultilangString\";\r\nimport dictionary from \"../../utils/dictionary.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    width: \"300px\",\r\n  },\r\n}));\r\n\r\nconst SidePanel = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const { isOpenSidePanel } = useSelector((state) => state.ui);\r\n  const { countryList } = useSelector((state) => state.countries);\r\n\r\n  const toggleDrawer = (open) => (event) => {\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    dispatch(toggleWithValueSidePanel(open));\r\n  };\r\n\r\n  return (\r\n    <SwipeableDrawer\r\n      anchor=\"right\"\r\n      open={isOpenSidePanel}\r\n      onClose={toggleDrawer(false)}\r\n      onOpen={toggleDrawer(true)}\r\n    >\r\n      <div className={classes.container}>\r\n        <NestedList\r\n          values={[\r\n            [\r\n              <MultilangString value={dictionary.common.listOfCodes} />,\r\n              countryList.map(({ name, alpha3Code }) => (\r\n                <PropertyItem key={name} title={name} value={alpha3Code} />\r\n              )),\r\n            ],\r\n          ]}\r\n          transition={0}\r\n        />\r\n      </div>\r\n    </SwipeableDrawer>\r\n  );\r\n};\r\n\r\nexport default SidePanel;\r\n","import React, { useEffect } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport MainTemplate from \"./components/Templates/MainTemplate\";\nimport Input from \"./components/Input\";\nimport Content from \"./components/Content\";\nimport Error from \"./components/Error\";\nimport AppBar from \"./components/AppBar\";\nimport SidePanel from \"./components/SidePanel\";\n\nimport { fetchCountryList } from \"./redux/actions/countries\";\n\nimport createErrorMessageSelector from \"./redux/selectors/errorMessageSelector\";\n\nimport MultilangString from \"./components/MultilangString\";\nimport dictionary from \"./utils/dictionary.json\";\n\nimport \"./App.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(3),\n  },\n}));\n\nconst actions = [\"GET_COUNTRY_LIST\"];\nconst errorMessageSelector = createErrorMessageSelector(actions);\n\nconst App = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCountryList());\n  }, [dispatch]);\n\n  const error = useSelector((state) => errorMessageSelector(state));\n\n  return (\n    <div className=\"App\">\n      <AppBar />\n      <SidePanel />\n      <Container className={classes.container} maxWidth=\"lg\">\n        {!error ? (\n          <MainTemplate input={<Input />} result={<Content />} />\n        ) : (\n          <Error\n            message={\n              <MultilangString value={dictionary.errors.appIsUnavaliable} />\n            }\n          />\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <CssBaseline />\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const RU = \"ru\";\r\nexport const EN = \"en\";\r\n","import { combineReducers } from \"redux\";\r\n\r\nconst reducers = [\r\n  \"loadingReducer\",\r\n  \"errorReducer\",\r\n  \"countries\",\r\n  \"ui\",\r\n  \"system\",\r\n];\r\n\r\nexport default combineReducers(\r\n  reducers.reduce((initial, name) => {\r\n    // eslint-disable-next-line global-require\r\n    initial[name] = require(`./${name}`).default;\r\n    return initial;\r\n  }, {})\r\n);\r\n","const initialState = {\r\n  countryList: [],\r\n  currentCountry: {},\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_COUNTRY_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        currentCountry: action.payload,\r\n      };\r\n    case \"GET_COUNTRY_LIST_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        countryList: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = {}, action) => {\r\n  const { type, payload } = action;\r\n  const matches = /(.*)_(REQUEST|FAILURE)/.exec(type);\r\n\r\n  // not a *_REQUEST / *_FAILURE actions, so we ignore them\r\n  if (!matches) return state;\r\n\r\n  const [, requestName, requestState] = matches;\r\n  return {\r\n    ...state,\r\n    // Store errorMessage\r\n    // e.g. stores errorMessage when receiving GET_TODOS_FAILURE\r\n    //      else clear errorMessage when receiving GET_TODOS_REQUEST\r\n    [requestName]: requestState === \"FAILURE\" ? payload.message : \"\",\r\n  };\r\n};\r\n","export default (state = {}, action) => {\r\n  const { type } = action;\r\n  const matches = /(.*)_(REQUEST|SUCCESS|FAILURE)/.exec(type);\r\n\r\n  // not a *_REQUEST / *_SUCCESS /  *_FAILURE actions, so we ignore them\r\n  if (!matches) return state;\r\n\r\n  const [, requestName, requestState] = matches;\r\n  return {\r\n    ...state,\r\n    // Store whether a request is happening at the moment or not\r\n    // e.g. will be true when receiving GET_TODOS_REQUEST\r\n    //      and false when receiving GET_TODOS_SUCCESS / GET_TODOS_FAILURE\r\n    [requestName]: requestState === \"REQUEST\"\r\n  };\r\n};\r\n","import { EN } from \"../../constants/languages\";\r\n\r\nconst initialState = {\r\n  language: localStorage.getItem(\"language\") || EN,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_LANGUAGE\":\r\n      return {\r\n        ...state,\r\n        language: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n  isOpenSidePanel: false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"OPEN_SIDE_PANEL\":\r\n      return {\r\n        ...state,\r\n        isOpenSidePanel: true,\r\n      };\r\n    case \"CLOSE_SIDE_PANEL\":\r\n      return {\r\n        ...state,\r\n        isOpenSidePanel: false,\r\n      };\r\n    case \"TOGGLE_SIDE_PANEL\":\r\n      return {\r\n        ...state,\r\n        isOpenSidePanel: !state.isOpenSidePanel,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"],"sourceRoot":""}